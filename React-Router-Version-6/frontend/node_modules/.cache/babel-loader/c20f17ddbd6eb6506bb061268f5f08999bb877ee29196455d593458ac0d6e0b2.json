{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_Course\\\\ReactProjects\\\\React_course_all_projects_exercises\\\\React-Router-Version-6\\\\frontend\\\\src\\\\pages\\\\EventDetailPage.js\",\n  _s = $RefreshSig$();\nimport { Fragment } from \"react\";\nimport { json, Link, useLoaderData, useParams } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet EventDetails = () => {\n  _s();\n  let loader = useLoaderData();\n  console.log(loader);\n  // return <EventItem />;\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"asd\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 10\n  }, this);\n};\n_s(EventDetails, \"SvXiWoqIvuDezREf5HICkPbMEJc=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventDetails;\nexport default EventDetails;\nexport const eventLoader = async _ref => {\n  let {\n    request,\n    params\n  } = _ref;\n  let requestData = await fetch(\"http://localhost:8080/events\" + params.eventId);\n  if (!requestData.ok) {\n    throw json({\n      message: \"Event is Not Found!\"\n    }, {\n      status: 500\n    });\n  } else {\n    return requestData;\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"EventDetails\");","map":{"version":3,"names":["Fragment","json","Link","useLoaderData","useParams","EventItem","EventDetails","loader","console","log","eventLoader","request","params","requestData","fetch","eventId","ok","message","status"],"sources":["D:/React_Course/ReactProjects/React_course_all_projects_exercises/React-Router-Version-6/frontend/src/pages/EventDetailPage.js"],"sourcesContent":["import { Fragment } from \"react\";\r\nimport { json, Link, useLoaderData, useParams } from \"react-router-dom\";\r\nimport EventItem from \"../components/EventItem\";\r\n\r\nlet EventDetails = () => {\r\n  let loader = useLoaderData();\r\n  console.log(loader);\r\n  // return <EventItem />;\r\n  return <p>asd</p>;\r\n};\r\n\r\nexport default EventDetails;\r\n\r\nexport const eventLoader = async ({ request, params }) => {\r\n  let requestData = await fetch(\r\n    \"http://localhost:8080/events\" + params.eventId\r\n  );\r\n\r\n  if (!requestData.ok) {\r\n    throw json({ message: \"Event is Not Found!\" }, { status: 500 });\r\n  } else {\r\n    return requestData;\r\n  }\r\n};\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,IAAI,EAAEC,IAAI,EAAEC,aAAa,EAAEC,SAAS,QAAQ,kBAAkB;AACvE,OAAOC,SAAS,MAAM,yBAAyB;AAAC;AAEhD,IAAIC,YAAY,GAAG,MAAM;EAAA;EACvB,IAAIC,MAAM,GAAGJ,aAAa,EAAE;EAC5BK,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;EACnB;EACA,oBAAO;IAAA,UAAG;EAAG;IAAA;IAAA;IAAA;EAAA,QAAI;AACnB,CAAC;AAAC,GALED,YAAY;EAAA,QACDH,aAAa;AAAA;AAAA,KADxBG,YAAY;AAOhB,eAAeA,YAAY;AAE3B,OAAO,MAAMI,WAAW,GAAG,cAA+B;EAAA,IAAxB;IAAEC,OAAO;IAAEC;EAAO,CAAC;EACnD,IAAIC,WAAW,GAAG,MAAMC,KAAK,CAC3B,8BAA8B,GAAGF,MAAM,CAACG,OAAO,CAChD;EAED,IAAI,CAACF,WAAW,CAACG,EAAE,EAAE;IACnB,MAAMf,IAAI,CAAC;MAAEgB,OAAO,EAAE;IAAsB,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACjE,CAAC,MAAM;IACL,OAAOL,WAAW;EACpB;AACF,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}