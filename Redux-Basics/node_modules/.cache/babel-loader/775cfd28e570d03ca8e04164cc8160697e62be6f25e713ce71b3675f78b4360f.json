{"ast":null,"code":"import { createStore } from \"redux\";\nimport { configureStore, createSlice } from \"@reduxjs/toolkit\";\nlet counterDefaultState = {\n  counter: 0,\n  showCounter: true\n};\nlet counterSlice = createSlice({\n  name: \"counter\",\n  initialState: counterDefaultState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nlet authDefaultState = {\n  isLoggedIn: false\n};\nlet authSlice = createSlice({\n  name: \"auth\",\n  initialState: authDefaultState,\n  reducers: {\n    login(state) {\n      state.isLoggedIn = true;\n    },\n    logout(state) {\n      state.isLoggedIn = false;\n    }\n  }\n});\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\n\n// let counterReducer = (state = counterDefaultState, action) => {\n//   if (action.type === \"Increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"Increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"Decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"Toggle\") {\n//     return {\n//       counter: state.counter,\n//       showCounter: !state.showCounter,\n//     };\n//   }\n//   return state;\n// };\n\n// const store = createStore(counterReducer);\n\nexport default store;","map":{"version":3,"names":["createStore","configureStore","createSlice","counterDefaultState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","authDefaultState","isLoggedIn","authSlice","login","logout","store","reducer","auth","counterActions","actions","authActions"],"sources":["D:/React_Course/ReactProjects/React_course_all_projects_exercises/Redux-Basics/src/store/index.js"],"sourcesContent":["import { createStore } from \"redux\";\r\nimport { configureStore, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nlet counterDefaultState = { counter: 0, showCounter: true };\r\nlet counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: counterDefaultState,\r\n  reducers: {\r\n    increment(state) {\r\n      state.counter++;\r\n    },\r\n    decrement(state) {\r\n      state.counter--;\r\n    },\r\n    increase(state, action) {\r\n      state.counter = state.counter + action.payload;\r\n    },\r\n    toggleCounter(state) {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\nlet authDefaultState = {\r\n  isLoggedIn: false,\r\n};\r\n\r\nlet authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: authDefaultState,\r\n  reducers: {\r\n    login(state) {\r\n      state.isLoggedIn = true;\r\n    },\r\n    logout(state) {\r\n      state.isLoggedIn = false;\r\n    },\r\n  },\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },\r\n});\r\n\r\nexport const counterActions = counterSlice.actions;\r\nexport const authActions = authSlice.actions;\r\n\r\n// let counterReducer = (state = counterDefaultState, action) => {\r\n//   if (action.type === \"Increment\") {\r\n//     return {\r\n//       counter: state.counter + 1,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n\r\n//   if (action.type === \"Increase\") {\r\n//     return {\r\n//       counter: state.counter + action.amount,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n\r\n//   if (action.type === \"Decrement\") {\r\n//     return {\r\n//       counter: state.counter - 1,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n\r\n//   if (action.type === \"Toggle\") {\r\n//     return {\r\n//       counter: state.counter,\r\n//       showCounter: !state.showCounter,\r\n//     };\r\n//   }\r\n//   return state;\r\n// };\r\n\r\n// const store = createStore(counterReducer);\r\n\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAE9D,IAAIC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAC3D,IAAIC,YAAY,GAAGJ,WAAW,CAAC;EAC7BK,IAAI,EAAE,SAAS;EACfC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAE;IACRC,SAAS,CAACC,KAAK,EAAE;MACfA,KAAK,CAACP,OAAO,EAAE;IACjB,CAAC;IACDQ,SAAS,CAACD,KAAK,EAAE;MACfA,KAAK,CAACP,OAAO,EAAE;IACjB,CAAC;IACDS,QAAQ,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,GAAGU,MAAM,CAACC,OAAO;IAChD,CAAC;IACDC,aAAa,CAACL,KAAK,EAAE;MACnBA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IACxC;EACF;AACF,CAAC,CAAC;AAEF,IAAIY,gBAAgB,GAAG;EACrBC,UAAU,EAAE;AACd,CAAC;AAED,IAAIC,SAAS,GAAGjB,WAAW,CAAC;EAC1BK,IAAI,EAAE,MAAM;EACZC,YAAY,EAAES,gBAAgB;EAC9BR,QAAQ,EAAE;IACRW,KAAK,CAACT,KAAK,EAAE;MACXA,KAAK,CAACO,UAAU,GAAG,IAAI;IACzB,CAAC;IACDG,MAAM,CAACV,KAAK,EAAE;MACZA,KAAK,CAACO,UAAU,GAAG,KAAK;IAC1B;EACF;AACF,CAAC,CAAC;AAEF,MAAMI,KAAK,GAAGrB,cAAc,CAAC;EAC3BsB,OAAO,EAAE;IAAEnB,OAAO,EAAEE,YAAY,CAACiB,OAAO;IAAEC,IAAI,EAAEL,SAAS,CAACI;EAAQ;AACpE,CAAC,CAAC;AAEF,OAAO,MAAME,cAAc,GAAGnB,YAAY,CAACoB,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGR,SAAS,CAACO,OAAO;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,eAAeJ,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}